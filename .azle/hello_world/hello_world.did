service: () -> {
    createchannel: (record {username:text; nameofchannel:text}) -> (variant {Ok:text; Err:variant {NoMessageWithSuchId:text; NotAMemberOfGroup:text; channelAlreadyExist:text; credentialsMissing:text; usernameIsRequired:text; onlyOwnerCanDelete:text; GroupNameIsRequired:text; userNameAlreadyExist:text; EnterCorrectDetais:text; channelDoesNotExist:text; UserDoesNotExist:text; ErrorWhenExitingGropu:text; AlreadyAmember:text}});
    deletechannel: (record {owner:principal; nameofchannel:text}) -> (variant {Ok:text; Err:variant {NoMessageWithSuchId:text; NotAMemberOfGroup:text; channelAlreadyExist:text; credentialsMissing:text; usernameIsRequired:text; onlyOwnerCanDelete:text; GroupNameIsRequired:text; userNameAlreadyExist:text; EnterCorrectDetais:text; channelDoesNotExist:text; UserDoesNotExist:text; ErrorWhenExitingGropu:text; AlreadyAmember:text}});
    followchannel: (record {username:text; nameofchannel:text}) -> (text);
    getAllChannels: () -> (vec record {owner:principal; name:text; news:vec record {id:principal; title:text; description:text; replies:vec record {by:principal; newsid:principal; reply:text}}; followers:vec text}) query;
    get_news: (record {channelname:text}) -> (variant {Ok:vec record {id:principal; title:text; description:text; replies:vec record {by:principal; newsid:principal; reply:text}}; Err:variant {NoMessageWithSuchId:text; NotAMemberOfGroup:text; channelAlreadyExist:text; credentialsMissing:text; usernameIsRequired:text; onlyOwnerCanDelete:text; GroupNameIsRequired:text; userNameAlreadyExist:text; EnterCorrectDetais:text; channelDoesNotExist:text; UserDoesNotExist:text; ErrorWhenExitingGropu:text; AlreadyAmember:text}}) query;
    postnews: (record {title:text; channelname:text; owner:principal; description:text}) -> (text);
    registerUser: (record {username:text}) -> (variant {Ok:text; Err:variant {NoMessageWithSuchId:text; NotAMemberOfGroup:text; channelAlreadyExist:text; credentialsMissing:text; usernameIsRequired:text; onlyOwnerCanDelete:text; GroupNameIsRequired:text; userNameAlreadyExist:text; EnterCorrectDetais:text; channelDoesNotExist:text; UserDoesNotExist:text; ErrorWhenExitingGropu:text; AlreadyAmember:text}});
    reply_to_news: (record {username:text; channelname:text; newsid:principal; reply:text}) -> (text);
    unfollowchannel: (record {username:text; nameofchannel:text}) -> (text);
}
